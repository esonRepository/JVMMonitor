package com.busi.jvm.agent.asm;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;import org.objectweb.asm.Type;import org.objectweb.asm.commons.AdviceAdapter;import com.busi.jvm.agent.transfer.dto.ClassNodeInfoDto;/** * Created by eson on 2017/11/29. */public class MethodChangeVisitor extends ClassVisitor {	private ClassNodeInfoDto classNodeInfoDto;	public MethodChangeVisitor(int i, ClassVisitor classVisitor, ClassNodeInfoDto classNodeInfoDto) {		super(i, classVisitor);		this.classNodeInfoDto = classNodeInfoDto;	}	@Override	public MethodVisitor visitMethod(int access, final String name, final String desc, String signature,			String[] exceptions) {		final String methodLongName = this.classNodeInfoDto.getClassName() + "." + name;		final String classPath = this.classNodeInfoDto.getClassName().replaceAll("\\.", "/");		final Map<String, String> requestMappingMap = this.classNodeInfoDto.getRequestMappingMap();		final String concernStackFlag = this.classNodeInfoDto.getConcernStackFlag();		final Map<String, String> notNeedTransferMethodMap = this.classNodeInfoDto.getNotNeedTransferMethodMap();		MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);		if (this.classNodeInfoDto.isJdbcPackage()) {			if (this.classNodeInfoDto.isJdbc()) {				if ("execute".equals(name)) {					mv = new AdviceAdapter(Opcodes.ASM5, mv, access, name, desc) {						// 方法进入时获取开始时间						@Override						public void onMethodEnter() {							// 等价于com.busi.jvm.agent.monitor.MethodMonitor.startMonitor(dbScript,methodLongName);							this.visitVarInsn(ALOAD, 0);							this.visitFieldInsn(Opcodes.GETFIELD, classPath, "sql",									Type.getObjectType("java/lang/String").getDescriptor());							this.visitLdcInsn(methodLongName);							this.visitMethodInsn(Opcodes.INVOKESTATIC, "com/busi/jvm/agent/monitor/MethodMonitor",									"startDBMonitor", "(Ljava/lang/String;Ljava/lang/String;)V");						}						// 方法退出时获取结束时间并计算执行时间						@Override						public void onMethodExit(int opcode) {							// 等价于com.busi.jvm.agent.monitor.MethodMonitor.endMonitor(methodLongName);							this.visitLdcInsn(methodLongName);							this.visitMethodInsn(Opcodes.INVOKESTATIC, "com/busi/jvm/agent/monitor/MethodMonitor",									"endDBMonitor", "(Ljava/lang/String;)V");						}					};				}			}			return mv;		}		if (Opcodes.ACC_NATIVE != access && StringUtils.isBlank(notNeedTransferMethodMap.get(name))) {			// 过来待修改类的构造函数			final String requestMappingPath = StringUtils.isBlank(requestMappingMap.get(name)) ? ""					: requestMappingMap.get(name);			mv = new AdviceAdapter(Opcodes.ASM5, mv, access, name, desc) {				// 方法进入时获取开始时间				@Override				public void onMethodEnter() {					// 等价于com.busi.jvm.agent.monitor.MethodMonitor.startMonitor(methodLongName);					this.visitLdcInsn(methodLongName);					this.visitLdcInsn(requestMappingPath);					this.visitLdcInsn(concernStackFlag);					this.visitMethodInsn(Opcodes.INVOKESTATIC, "com/busi/jvm/agent/monitor/MethodMonitor",							"startMonitor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");				}				// 方法退出时获取结束时间并计算执行时间				@Override				public void onMethodExit(int opcode) {					// 等价于com.busi.jvm.agent.monitor.MethodMonitor.endMonitor(methodLongName);					this.visitLdcInsn(methodLongName);					this.visitLdcInsn(concernStackFlag);					this.visitMethodInsn(Opcodes.INVOKESTATIC, "com/busi/jvm/agent/monitor/MethodMonitor", "endMonitor",							"(Ljava/lang/String;Ljava/lang/String;)V");				}			};		}		return mv;	}}