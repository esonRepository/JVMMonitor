package com.busi.jvm.agent.tools;import java.io.IOException;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.concurrent.TimeUnit;import org.apache.commons.lang.StringUtils;import org.apache.http.client.HttpRequestRetryHandler;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;import org.apache.http.protocol.HttpContext;public class HttpClientTools {	private HttpClientTools() {	}	private final static PoolingHttpClientConnectionManager	CONNECTION_MANAGER;	private final static CloseableHttpClient				DEFAULT_CLIENT;	static {		CONNECTION_MANAGER = new PoolingHttpClientConnectionManager(180, TimeUnit.SECONDS);		CONNECTION_MANAGER.setMaxTotal(50);		CONNECTION_MANAGER.setDefaultMaxPerRoute(20);		CONNECTION_MANAGER.setValidateAfterInactivity(1000);		// 请求重试处理		HttpRequestRetryHandler httpRequestRetryHandler = new HttpRequestRetryHandler() {			public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {				return false;			}		};		DEFAULT_CLIENT = HttpClients.custom().setConnectionManager(CONNECTION_MANAGER).setConnectionManagerShared(true)				.setRetryHandler(httpRequestRetryHandler).build();	}	public static CloseableHttpClient retrieveHttpClient() {		return DEFAULT_CLIENT;	}	/**	 *	 * 功能说明：HTTP Post 获取内容	 *	 * @param url	 *            请求的url地址 ?之前的地址	 * @param content	 *            请求的参数	 * @return String 返回内容	 */	public static void doPost(String url, String content) {		doPost(url, content, "UTF-8", null);	}	/**	 *	 * 功能说明：HTTP Post 获取内容	 *	 * @param url	 *            请求的url地址 ?之前的地址	 * @param charSet	 *            编码格式	 * @return String 返回内容	 */	public static void doPost(String url, String content, String charSet) {		doPost(url, content, charSet, null);	}	/**	 *	 * 功能说明：HTTP Post 获取内容	 *	 * @param url	 *            请求的url地址 ?之前的地址	 * @param charSet	 *            编码格式	 * @param headers	 *            http header	 * @return String 返回内容	 */	public static void doPost(String url, String content, String charSet, Map<String, String> headers) {		if (StringUtils.isBlank(url)) {			return;		}		if (StringUtils.isBlank(content)) {			content = "";		}		CloseableHttpResponse response = null;		CloseableHttpClient httpClient = null;		try {			httpClient = retrieveHttpClient();			HttpPost httpPost = new HttpPost(url);			if (headers != null && !headers.isEmpty()) {				for (Iterator<Entry<String, String>> it = headers.entrySet().iterator(); it.hasNext();) {					Entry<String, String> header = it.next();					httpPost.addHeader(header.getKey(), header.getValue());				}			}			StringEntity stringEntity = new StringEntity(content, charSet);			httpPost.setEntity(stringEntity);			response = httpClient.execute(httpPost);		} catch (Exception e) {			e.printStackTrace();		} finally {			try {				if (response != null) {					response.close();				}			} catch (IOException e1) {				// do thing			}		}	}}