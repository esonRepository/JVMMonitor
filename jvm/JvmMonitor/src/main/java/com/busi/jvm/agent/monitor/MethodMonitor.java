package com.busi.jvm.agent.monitor;import java.util.Date;import java.util.Stack;import org.apache.commons.lang.StringUtils;import com.busi.jvm.agent.MessageAgent;import com.busi.jvm.agent.container.CallTreeContainer;import com.busi.jvm.agent.dto.StackNodeDto;import com.busi.jvm.agent.dto.TransactionDto;import com.busi.jvm.agent.dto.builder.TransactionDtoBuilder;import com.busi.jvm.agent.tools.DateTools;import com.busi.jvm.agent.util.AgentConstants;import com.busi.monitor.TraceContext;/** * Created by eson on 2017/11/29. */public class MethodMonitor {	public static void startMonitor(String methodLongName, String requestMappingPath, String concernStackFlag) {		TransactionDto jvmTransactionDto = CallTreeContainer.getTransactionDto();		if (jvmTransactionDto == null) {			// 对于web 应用，只有controller才能开始transaction			boolean needStartTransaction = false;			if (AgentConstants.webApplicationFlag.equals(CallTreeContainer.getWebFlag())) {				if (StringUtils.isNotBlank(requestMappingPath)) {					needStartTransaction = true;				}			} else {				needStartTransaction = true;			}			if (needStartTransaction) {				jvmTransactionDto = TransactionDtoBuilder.buildTransaction(methodLongName, requestMappingPath);				CallTreeContainer.setTransactionDto(jvmTransactionDto);			}			return;		}		if ("0".equals(concernStackFlag)) {			return;		}		StackNodeDto jmvStackNodeDto = TransactionDtoBuilder.buildStackNode(methodLongName, requestMappingPath);		TransactionDtoBuilder.addStackNodeIntoTransaction(jmvStackNodeDto, jvmTransactionDto);	}	public static void startDBMonitor(String dbScript, String methodLongName) {		TransactionDto jvmTransactionDto = CallTreeContainer.getTransactionDto();		if (jvmTransactionDto == null) {			return;		}		StackNodeDto jmvStackNodeDto = TransactionDtoBuilder.buildStackNode(methodLongName);		if (StringUtils.isNotBlank(dbScript)) {			dbScript = dbScript.replaceAll("\\s+", " ");			jmvStackNodeDto.setDbScript(dbScript);			jmvStackNodeDto.setRequestType(AgentConstants.jdbcType);		}		TransactionDtoBuilder.addStackNodeIntoTransaction(jmvStackNodeDto, jvmTransactionDto);	}	public static void endDBMonitor(String methodLongName) {		endMonitor(methodLongName, "1");	}	public static void endMonitor(String methodLongName, String concernStackFlag) {		TransactionDto jvmTransaction = CallTreeContainer.getTransactionDto();		if (jvmTransaction == null) {			return;		}		// transaction节点		long enTime = System.nanoTime();		if ("0".equals(concernStackFlag)) {			return;		}		Stack<StackNodeDto> stack = jvmTransaction.getStack();		StackNodeDto jmvStackNodeDto = null;		if (!stack.isEmpty()) {			jmvStackNodeDto = stack.pop();		}		if (jmvStackNodeDto == null) {			if (methodLongName.equals(jvmTransaction.getMethodLongName())) {				endTransaction(jvmTransaction, enTime);			}			return;		}		if (jmvStackNodeDto != null) {			jmvStackNodeDto.setSpendTime(enTime - jmvStackNodeDto.getStartTime());		}	}	private static void endTransaction(TransactionDto jvmTransaction, long enTime) {		jvmTransaction.setSpendTime(enTime - jvmTransaction.getStartTimeLong());		jvmTransaction.setEndTime(DateTools.formatDate(new Date()));		MessageAgent.getInstance().send(jvmTransaction);		CallTreeContainer.clear();		TraceContext.clear();	}}